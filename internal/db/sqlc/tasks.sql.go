// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, status, created_at, due_date, priority FROM tasks ORDER BY created_at DESC
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, status, created_at, due_date, priority FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.DueDate,
		&i.Priority,
	)
	return i, err
}

const getTasksByStatus = `-- name: GetTasksByStatus :many
SELECT id, title, status, created_at, due_date, priority FROM tasks
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTasksByStatus(ctx context.Context, status string) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksDueBetween = `-- name: GetTasksDueBetween :many
SELECT id, title, status, created_at, due_date, priority FROM tasks
WHERE due_date >= $1
  AND due_date < $2
ORDER BY due_date ASC
`

type GetTasksDueBetweenParams struct {
	DueDate   pgtype.Timestamp `json:"due_date"`
	DueDate_2 pgtype.Timestamp `json:"due_date_2"`
}

func (q *Queries) GetTasksDueBetween(ctx context.Context, arg GetTasksDueBetweenParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksDueBetween, arg.DueDate, arg.DueDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTask = `-- name: SaveTask :exec
INSERT INTO tasks (id, title, status, created_at, due_date, priority)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id) DO UPDATE
SET title      = EXCLUDED.title,
    status     = EXCLUDED.status,
    created_at = EXCLUDED.created_at,
    due_date   = EXCLUDED.due_date,
    priority   = EXCLUDED.priority
`

type SaveTaskParams struct {
	ID        string           `json:"id"`
	Title     string           `json:"title"`
	Status    string           `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	DueDate   pgtype.Timestamp `json:"due_date"`
	Priority  string           `json:"priority"`
}

func (q *Queries) SaveTask(ctx context.Context, arg SaveTaskParams) error {
	_, err := q.db.Exec(ctx, saveTask,
		arg.ID,
		arg.Title,
		arg.Status,
		arg.CreatedAt,
		arg.DueDate,
		arg.Priority,
	)
	return err
}
