// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, status, created_at, due_date, priority FROM tasks ORDER BY created_at DESC
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOverdueTasks = `-- name: GetOverdueTasks :many
SELECT id, title, status, created_at, due_date, priority FROM tasks 
WHERE due_date < CURRENT_DATE
  AND status = 'active'
`

func (q *Queries) GetOverdueTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getOverdueTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSortedTasks = `-- name: GetSortedTasks :many
SELECT id, title, status, created_at, due_date, priority FROM tasks
ORDER BY
    CASE WHEN $1 = 'title' AND $2 = 'asc' THEN title END ASC,
    CASE WHEN $1 = 'title' AND $2 = 'desc' THEN title END DESC,
    CASE WHEN $1 = 'created_at' AND $2 = 'asc' THEN created_at END ASC,
    CASE WHEN $1 = 'created_at' AND $2 = 'desc' THEN created_at END DESC,
    CASE WHEN $1 = 'priority' AND $2 = 'asc' THEN
        CASE priority
            WHEN 'low' THEN 1
            WHEN 'medium' THEN 2
            WHEN 'high' THEN 3
        END
    END ASC,
    CASE WHEN $1 = 'priority' AND $2 = 'desc' THEN
        CASE priority
            WHEN 'low' THEN 1
            WHEN 'medium' THEN 2
            WHEN 'high' THEN 3
        END
    END DESC
`

type GetSortedTasksParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

func (q *Queries) GetSortedTasks(ctx context.Context, arg GetSortedTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getSortedTasks, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, status, created_at, due_date, priority FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.DueDate,
		&i.Priority,
	)
	return i, err
}

const getTasksByStatus = `-- name: GetTasksByStatus :many
SELECT id, title, status, created_at, due_date, priority FROM tasks WHERE status = $1 ORDER BY created_at DESC
`

func (q *Queries) GetTasksByStatus(ctx context.Context, status string) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksDueThisWeek = `-- name: GetTasksDueThisWeek :many
SELECT id, title, status, created_at, due_date, priority FROM tasks 
WHERE due_date >= CURRENT_DATE
  AND due_date < CURRENT_DATE + INTERVAL '7 days'
`

func (q *Queries) GetTasksDueThisWeek(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksDueThisWeek)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksDueToday = `-- name: GetTasksDueToday :many
SELECT id, title, status, created_at, due_date, priority FROM tasks 
WHERE due_date::date = CURRENT_DATE
`

func (q *Queries) GetTasksDueToday(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksDueToday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTask = `-- name: SaveTask :exec
INSERT INTO tasks (id, title, status, created_at, due_date, priority)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id) DO UPDATE
SET title = EXCLUDED.title,
    status = EXCLUDED.status,
    created_at = EXCLUDED.created_at,
    due_date = EXCLUDED.due_date,
    priority = EXCLUDED.priority
`

type SaveTaskParams struct {
	ID        string           `json:"id"`
	Title     string           `json:"title"`
	Status    string           `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	DueDate   pgtype.Timestamp `json:"due_date"`
	Priority  pgtype.Text      `json:"priority"`
}

func (q *Queries) SaveTask(ctx context.Context, arg SaveTaskParams) error {
	_, err := q.db.Exec(ctx, saveTask,
		arg.ID,
		arg.Title,
		arg.Status,
		arg.CreatedAt,
		arg.DueDate,
		arg.Priority,
	)
	return err
}
